/* ./Test.svelte generated by Svelte v3.58.0 */
import {
	SvelteComponent,
	assign,
	check_outros,
	claim_component,
	component_subscribe,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	empty,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert_hydration,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { getContext } from "svelte";
import { El } from "../el";
import { TABS } from "./Tabs.svelte";

function create_if_block(ctx) {
	let el;
	let current;
	const el_spread_levels = [/*$$restProps*/ ctx[4], /*props*/ ctx[0]];

	let el_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < el_spread_levels.length; i += 1) {
		el_props = assign(el_props, el_spread_levels[i]);
	}

	el = new El({ props: el_props });

	return {
		c() {
			create_component(el.$$.fragment);
		},
		l(nodes) {
			claim_component(el.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(el, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const el_changes = (dirty & /*$$restProps, props*/ 17)
			? get_spread_update(el_spread_levels, [
					dirty & /*$$restProps*/ 16 && get_spread_object(/*$$restProps*/ ctx[4]),
					dirty & /*props*/ 1 && get_spread_object(/*props*/ ctx[0])
				])
			: {};

			if (dirty & /*$$scope*/ 256) {
				el_changes.$$scope = { dirty, ctx };
			}

			el.$set(el_changes);
		},
		i(local) {
			if (current) return;
			transition_in(el.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(el.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(el, detaching);
		}
	};
}

// (19:1) <El {...$$restProps} {...props}>
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		l(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$selectedPanel*/ ctx[1] === /*panel*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$selectedPanel*/ ctx[1] === /*panel*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$selectedPanel*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["componentName","role"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedPanel;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { componentName = "tab-pane" } = $$props;
	let { role = "tabpanel" } = $$props;
	const panel = {};
	const { registerPanel, selectedPanel } = getContext(TABS);
	component_subscribe($$self, selectedPanel, value => $$invalidate(1, $selectedPanel = value));
	registerPanel(panel);
	let props = {};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('componentName' in $$new_props) $$invalidate(5, componentName = $$new_props.componentName);
		if ('role' in $$new_props) $$invalidate(6, role = $$new_props.role);
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*componentName, role*/ 96) {
			$: {
				$$invalidate(0, props = { componentName, role });
			}
		}
	};

	return [
		props,
		$selectedPanel,
		panel,
		selectedPanel,
		$$restProps,
		componentName,
		role,
		slots,
		$$scope
	];
}

class Test extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { componentName: 5, role: 6 });
	}
}

export default Test;